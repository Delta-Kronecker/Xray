name: Automated Proxy Collection and Testing

on:
  schedule:
    # Run every 12 hours at 00:00 and 12:00 UTC
    - cron: '0 0,12 * * *'
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: write
  actions: read

jobs:
  proxy-collection-and-testing:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Python 3.x
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install Python dependencies
      run: |
        echo "Installing required Python packages..."
        pip install tenacity requests
        echo "Python dependencies installed successfully"

    - name: Set up Go 1.25.1
      uses: actions/setup-go@v4
      with:
        go-version: '1.25.1'

    - name: Install Go dependencies
      run: |
        cd xray_test
        go mod download
        go mod verify

    - name: Download and install Xray-core
      run: |
        echo "Downloading latest Xray-core for Linux..."
        # Get latest release version
        LATEST_RELEASE=$(curl -s https://api.github.com/repos/XTLS/Xray-core/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
        echo "Latest Xray-core version: $LATEST_RELEASE"
        
        # Download Xray-core
        wget "https://github.com/XTLS/Xray-core/releases/download/${LATEST_RELEASE}/Xray-linux-64.zip" -O xray.zip
        
        # Extract and install
        unzip xray.zip -d xray-temp
        chmod +x xray-temp/xray
        sudo mv xray-temp/xray /usr/local/bin/
        
        # Clean up
        rm -rf xray.zip xray-temp
        
        # Verify installation
        echo "Xray-core version:"
        xray -version
        echo "Xray-core installed successfully in /usr/local/bin/"

    - name: Clear data folder
      run: |
        echo "Clearing data folder..."
        if [ -d "data" ]; then
          rm -rf data/*
          echo "Data folder cleared successfully"
        else
          mkdir -p data
          echo "Data folder created"
        fi

    - name: Execute Python proxy collector
      id: python-collector
      run: |
        echo "Starting Python proxy collection..."
        cd config_collector
        python main.py
        echo "Python proxy collection completed"
        
        # Check what files were created
        echo "Files created by Python collector:"
        find . -name "*.json" -type f | head -20
        if [ -d "deduplicated_urls" ]; then
          echo "deduplicated_urls directory contents:"
          ls -la deduplicated_urls/ || echo "Cannot list deduplicated_urls"
        fi
      continue-on-error: true

    - name: Check and prepare config files for Go tests
      run: |
        echo "Checking and preparing config files..."
        
        # Check if deduplicated_urls directory exists
        if [ -d "config_collector/deduplicated_urls" ]; then
          echo "deduplicated_urls directory exists, contents:"
          ls -la config_collector/deduplicated_urls/
          
          # Copy files to the expected location if they exist
          mkdir -p ../config_collector/deduplicated_urls || true
          cp -f config_collector/deduplicated_urls/*.json ../config_collector/deduplicated_urls/ 2>/dev/null || echo "No files to copy"
        else
          echo "deduplicated_urls directory not found in config_collector/"
          
          # Check if files are in config_collector root
          echo "Checking config_collector root directory:"
          ls -la config_collector/
          
          # Create empty files to prevent errors
          mkdir -p ../config_collector/deduplicated_urls
          touch ../config_collector/deduplicated_urls/vless.json
          touch ../config_collector/deduplicated_urls/ss.json
          touch ../config_collector/deduplicated_urls/vmess.json
          echo "Created empty config files to prevent Go test errors"
        fi
        
        # Verify the files exist for Go tests
        echo "Final files available for Go tests:"
        ls -la ../config_collector/deduplicated_urls/ || echo "Cannot list final directory"

    - name: Check Python collector results
      run: |
        if [ "${{ steps.python-collector.outcome }}" = "failure" ]; then
          echo "⚠️ Python collector failed, but continuing with Go tests"
        else
          echo "✅ Python collector completed successfully"
        fi

    - name: Execute Go proxy tester
      id: go-proxy-tester
      run: |
        echo "Starting Go proxy connectivity testing..."
        cd xray_test
        
        # Show current directory structure for debugging
        echo "Current directory structure:"
        pwd
        ls -la ../
        ls -la ../config_collector/ || echo "Cannot list config_collector"
        ls -la ../config_collector/deduplicated_urls/ || echo "Cannot list deduplicated_urls"
        
        timeout 300 go run proxy-tester.go || echo "Proxy tester completed (may have timed out)"
        echo "Go proxy testing completed"
      continue-on-error: true

    - name: Execute Go quality tester
      id: go-quality-tester
      run: |
        echo "Starting Go proxy quality testing..."
        cd xray_test
        timeout 300 go run quality_tester.go || echo "Quality tester completed (may have timed out)"
        echo "Go quality testing completed"
      continue-on-error: true

    - name: Execute Go speed tester
      id: go-speed-tester
      run: |
        echo "Starting Go proxy speed testing..."
        cd xray_test
        timeout 300 go run speed_tester.go || echo "Speed tester completed (may have timed out)"
        echo "Go proxy testing completed"
      continue-on-error: true

    - name: Check data folder contents
      run: |
        echo "Checking data folder contents..."
        if [ -d "data" ]; then
          find data -type f -name "*" | head -20
          echo "Data folder file count: $(find data -type f | wc -l)"
        else
          echo "Data folder not found"
        fi

    - name: Configure git for automated commits
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'

    - name: Commit and push changes
      run: |
        echo "Checking for changes..."
        git add data/

        if git diff --cached --quiet; then
          echo "No changes to commit"
        else
          echo "Changes detected, committing..."

          # Create commit message with execution summary
          TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          PYTHON_STATUS="${{ steps.python-collector.outcome }}"
          PROXY_STATUS="${{ steps.go-proxy-tester.outcome }}"
          QUALITY_STATUS="${{ steps.go-quality-tester.outcome }}"
          SPEED_STATUS="${{ steps.go-speed-tester.outcome }}"
          RUN_ID="${{ github.run_id }}"
          GITHUB_REF_NAME="${{ github.ref_name }}"

          git commit -m "Automated proxy collection - ${TIMESTAMP}" \
                     -m "Python Collector: ${PYTHON_STATUS}" \
                     -m "Proxy Tester: ${PROXY_STATUS}" \
                     -m "Quality Tester: ${QUALITY_STATUS}" \
                     -m "Speed Tester: ${SPEED_STATUS}" \
                     -m "Workflow run: ${RUN_ID}"
          git push origin "${GITHUB_REF_NAME}"
          echo "✅ Changes committed and pushed successfully"
        fi

    - name: Upload execution logs as artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: execution-logs-${{ github.run_id }}
        path: data/
        retention-days: 7

    - name: Workflow summary
      if: always()
      run: |
        echo "## 🤖 Automated Proxy Collection Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Execution Time:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "**Workflow Run:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Script Execution Status" >> $GITHUB_STEP_SUMMARY
        echo "| Script | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Python Collector | ${{ steps.python-collector.outcome == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Go Proxy Tester | ${{ steps.go-proxy-tester.outcome == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Go Quality Tester | ${{ steps.go-quality-tester.outcome == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Go Speed Tester | ${{ steps.go-speed-tester.outcome == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ -d "data" ]; then
          FILE_COUNT=$(find data -type f | wc -l)
          echo "**Data Files Generated:** ${FILE_COUNT}" >> $GITHUB_STEP_SUMMARY
        else
          echo "**Data Files Generated:** 0" >> $GITHUB_STEP_SUMMARY
        fi
